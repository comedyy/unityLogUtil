/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class LogInfo : TBase
{
  private LogType _logType;
  private int _time;
  private string _DeviceName;
  private string _category;
  private string _content;

  /// <summary>
  /// 
  /// <seealso cref="LogType"/>
  /// </summary>
  public LogType LogType
  {
    get
    {
      return _logType;
    }
    set
    {
      __isset.logType = true;
      this._logType = value;
    }
  }

  public int Time
  {
    get
    {
      return _time;
    }
    set
    {
      __isset.time = true;
      this._time = value;
    }
  }

  public string DeviceName
  {
    get
    {
      return _DeviceName;
    }
    set
    {
      __isset.DeviceName = true;
      this._DeviceName = value;
    }
  }

  public string Category
  {
    get
    {
      return _category;
    }
    set
    {
      __isset.category = true;
      this._category = value;
    }
  }

  public string Content
  {
    get
    {
      return _content;
    }
    set
    {
      __isset.content = true;
      this._content = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool logType;
    public bool time;
    public bool DeviceName;
    public bool category;
    public bool content;
  }

  public LogInfo() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.I32) {
            LogType = (LogType)iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.I32) {
            Time = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.String) {
            DeviceName = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 4:
          if (field.Type == TType.String) {
            Category = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 5:
          if (field.Type == TType.String) {
            Content = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("LogInfo");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (__isset.logType) {
      field.Name = "logType";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)LogType);
      oprot.WriteFieldEnd();
    }
    if (__isset.time) {
      field.Name = "time";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Time);
      oprot.WriteFieldEnd();
    }
    if (DeviceName != null && __isset.DeviceName) {
      field.Name = "DeviceName";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(DeviceName);
      oprot.WriteFieldEnd();
    }
    if (Category != null && __isset.category) {
      field.Name = "category";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Category);
      oprot.WriteFieldEnd();
    }
    if (Content != null && __isset.content) {
      field.Name = "content";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Content);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LogInfo(");
    bool __first = true;
    if (__isset.logType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LogType: ");
      __sb.Append(LogType);
    }
    if (__isset.time) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Time: ");
      __sb.Append(Time);
    }
    if (DeviceName != null && __isset.DeviceName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeviceName: ");
      __sb.Append(DeviceName);
    }
    if (Category != null && __isset.category) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Category: ");
      __sb.Append(Category);
    }
    if (Content != null && __isset.content) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Content: ");
      __sb.Append(Content);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

