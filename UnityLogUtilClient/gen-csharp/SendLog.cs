/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class SendLog {
  public interface Iface {
    void log(List<LogInfo> lstLogInfo);
    #if SILVERLIGHT
    IAsyncResult Begin_log(AsyncCallback callback, object state, List<LogInfo> lstLogInfo);
    void End_log(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_log(AsyncCallback callback, object state, List<LogInfo> lstLogInfo)
    {
      return send_log(callback, state, lstLogInfo);
    }

    public void End_log(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    public void log(List<LogInfo> lstLogInfo)
    {
      #if !SILVERLIGHT
      send_log(lstLogInfo);

      #else
      var asyncResult = Begin_log(null, null, lstLogInfo);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_log(AsyncCallback callback, object state, List<LogInfo> lstLogInfo)
    #else
    public void send_log(List<LogInfo> lstLogInfo)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("log", TMessageType.Oneway, seqid_));
      log_args args = new log_args();
      args.LstLogInfo = lstLogInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["log"] = log_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void log_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      log_args args = new log_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.log(args.LstLogInfo);
      return;
    }
  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class log_args : TBase
  {
    private List<LogInfo> _lstLogInfo;

    public List<LogInfo> LstLogInfo
    {
      get
      {
        return _lstLogInfo;
      }
      set
      {
        __isset.lstLogInfo = true;
        this._lstLogInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lstLogInfo;
    }

    public log_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                LstLogInfo = new List<LogInfo>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  LogInfo _elem2;
                  _elem2 = new LogInfo();
                  _elem2.Read(iprot);
                  LstLogInfo.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("log_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (LstLogInfo != null && __isset.lstLogInfo) {
        field.Name = "lstLogInfo";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, LstLogInfo.Count));
          foreach (LogInfo _iter3 in LstLogInfo)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("log_args(");
      bool __first = true;
      if (LstLogInfo != null && __isset.lstLogInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LstLogInfo: ");
        __sb.Append(LstLogInfo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
